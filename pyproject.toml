[tool.poetry]
name = "check_shapes"
version = "0.2.0"
description = "A library for annotating and checking the shapes of tensors."
authors = [
    "Jesper Nielsen <jespernielsen1982+check_shapes@gmail.com>",
    "The GPflow Contributors",
]
license = "Apache-2.0"

readme = "README.md"
homepage = "https://gpflow.github.io/check_shapes"
repository = "https://github.com/GPflow/check_shapes"
documentation = "https://gpflow.github.io/check_shapes"

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Debuggers",
    "Typing :: Typed",
]

[tool.poetry.dependencies]
lark = "^1.1.0"
python = ">=3.7,<3.11"

[tool.poetry.dev-dependencies]
Sphinx = "^5.2.2"
black = "20.8b1"  # Pinned for backwards compatibility with the old stuff.
click = "<8.1.0"  # Required by `black = "20.8b1"`.
isort = "^5.10.0"
matplotlib = "^3.0.0"
mypy = ">0.920,!=0.982"
numpy = "<1.22.0"  # MyPy is unhappy about Python 3.7 and newer versions of NumPy.
# Pandas constrained to reduce Poetry search-time. Feel free to loosen this when we no longer need
# to support Python 3.7:
pandas = ">=1.1.0,<1.4.0"
pylint = "^2.10.0"
pytest = "^6.0.0"
sphinx-autoapi = "^2.0.0"
taskipy = "^1.10.0"
tomlkit = "^0.11.4"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
py_version=37
profile="black"

[tool.black]
target-version = ['py37']
line-length = 100

[tool.mypy]
python_version = "3.7"
show_error_codes = true
# First we turn on *all the checks*, and then we turn off those that are too annoying.
strict = true
disallow_untyped_decorators = false
disable_error_code = "no-untyped-call"
# This is needed because version 1.20.0 of NumPy introduces typing, so some ignores are necessary /
# unnecessary depending on the version of numpy:
warn_unused_ignores = false

[[tool.mypy.overrides]]
module = [
    "_pytest.*",
    "importlib_metadata.*",
    "jax.*",
    "matplotlib.*",
    "numpy.*",  # Newer version of numpy does have stubs. We can get rid of this in the future.
    "pandas.*",
    "pkg_resources.*",
    "pytest.*",
    "tensorflow.*",
    "tensorflow_probability.*",
    "torch.*",
]
ignore_missing_imports = true


[tool.taskipy.tasks]
docs = """
    echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX docs XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    rm -rf docs_build
    sphinx-build -b html docs docs_build
"""
docs_check = """
    echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX docs XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    rm -rf docs_test
    sphinx-build -W --keep-going -b html docs docs_test
"""

isort = """
    echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX isort XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    isort poetryenv check_shapes tests benchmark
"""
isort_check = """
    echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX isort XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    isort --check-only poetryenv check_shapes tests benchmark
"""
black = """
    echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX black XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    black poetryenv check_shapes tests benchmark
"""
black_check = """
    echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX black XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    black --check poetryenv check_shapes tests benchmark
"""
mypy = """
    echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX mypy XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    mypy poetryenv check_shapes tests benchmark
"""
pylint = """
    echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX pylint XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    pylint poetryenv check_shapes tests benchmark
"""
pytest = """
    echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX pytest XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    pytest tests
"""

format = "task isort && task black"
format_check = "task isort_check && task black_check"
lint = "task format_check && task mypy && task pylint"
format_and_test = "task format && task mypy && task pylint && task pytest"
test = "task lint && task pytest && task docs_check"
