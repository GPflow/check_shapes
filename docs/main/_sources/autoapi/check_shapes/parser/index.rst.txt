:orphan:

:py:mod:`check_shapes.parser`
=============================

.. py:module:: check_shapes.parser


Module Contents
---------------

.. py:function:: _tree_children(tree)

   Return all the children of `tree` that are trees themselves. 


.. py:function:: _token_children(tree)

   Return the values of all the children of `tree` that are tokens. 


.. py:class:: _TreeVisitor

   Bases: :py:obj:`abc.ABC`

   Functionality for visiting the nodes of parse-trees.

   This differs from the classes built-in in Lark, in that it allows passing `*args` and
   `**kwargs`.

   Subclasses should add methods with the same name as Lark rules. Those methods should take the
   parse tree of the rule, followed by any other `*args` and `**kwargs` you want. They may return
   anything.


.. py:class:: _ParseSpec(source)

   Bases: :py:obj:`_TreeVisitor`

   Functionality for visiting the nodes of parse-trees.

   This differs from the classes built-in in Lark, in that it allows passing `*args` and
   `**kwargs`.

   Subclasses should add methods with the same name as Lark rules. Those methods should take the
   parse tree of the rule, followed by any other `*args` and `**kwargs` you want. They may return
   anything.


.. py:class:: _RewritedocString(source, function_spec)

   Bases: :py:obj:`_TreeVisitor`

   Functionality for visiting the nodes of parse-trees.

   This differs from the classes built-in in Lark, in that it allows passing `*args` and
   `**kwargs`.

   Subclasses should add methods with the same name as Lark rules. Those methods should take the
   parse tree of the rule, followed by any other `*args` and `**kwargs` you want. They may return
   anything.

   .. py:method:: _guess_indent(docstring)

      Infer the level of indentation of a docstring.

      Returns `None` if the indentation could not be inferred.



.. py:class:: _CachedParser(grammar_filename, start_symbol, parser_name, re_terminal_descriptions, transformer_class, exception_class)

   Small wrapper around Lark so that we can reuse as much code as possible between the different
   things we parse.


.. py:function:: parse_tensor_spec(tensor_spec, context)

   Parse a `check_shapes` tensor specification.


.. py:function:: parse_function_spec(function_spec, context)

   Parse all `check_shapes` argument or note specification for a single function.


.. py:function:: parse_and_rewrite_docstring(docstring, function_spec, context)

   Rewrite `docstring` to include the shapes specified by the `argument_specs`.


