:py:mod:`check_shapes.checker`
==============================

.. py:module:: check_shapes.checker

.. autoapi-nested-parse::

   Class responsible for remembering and checking shapes.



Module Contents
---------------

.. py:class:: _ObservedDim


   Storage of observed size of a single dimension variable.

   .. py:method:: check_and_update(actual, broadcast)

      Attempt to merge new data into this observation.

      Returns whether the new data is compatible with existing observations. If this method
      returns `False` this object may have been left in an invalid state and should not be used
      again.



.. py:class:: _ObservedDims


   Storage of observed sizes of a var-rank / batch variable.

   .. py:method:: check_and_update(actual, broadcast, shape_possibly_truncated)

      Attempt to merge new data into this observation.

      Returns whether the new data is compatible with existing observations. If this method
      returns `False` this object may have been left in an invalid state and should not be used
      again.



.. py:class:: _ShapeCheck


   A shape check that is waiting to be performed.

   .. py:property:: finished
      :type: bool

      Whether this entire check has been performed.


   .. py:attribute:: actual
      :type: _Shape

      Actual observed shape.

      Only `actual[actual_begin:actual_end]` is still waiting to be checked. The beginning and end may
      already have been checked.


   .. py:attribute:: expected
      :type: check_shapes.specs.ParsedShapeSpec

      Specification to check against.

      Only `expected[expected_begin:expected_end]` is still waiting to be checked. The beginning and
      end may already have been checked.



.. py:class:: _VariableState


   Structure of stuff we need to know about each variable.

   .. py:attribute:: uses
      :type: List[Tuple[check_shapes.specs.ParsedTensorSpec, check_shapes.error_contexts.ErrorContext]]

      List of specs where this variable is used. 


   .. py:attribute:: observed_dim
      :type: Optional[_ObservedDim]

      Observed size of this variable, if the variable is rank-1.

      Set this `None` if this variable is varrank.


   .. py:attribute:: observed_dims
      :type: Optional[_ObservedDims]

      Observed shape of this variable, if the variable is varrank.

      Set this `None` if this variable is rank-1.


   .. py:attribute:: waiting_for_varrank
      :type: Set[_ShapeCheck]

      Checks that are waiting for the rank of this variable to be determined. 



.. py:class:: ShapeChecker


   Mechanism for checking the shapes of tensors.

   This remembers observed shapes and specifications, so that tensors can be checked for
   compatibility across multiple calls, and so that we can provide good error messages.

   Example:

   .. literalinclude:: /examples/test_check_shapes_examples.py
      :start-after: [shape_checker__raw]
      :end-before: [shape_checker__raw]
      :dedent:

   .. py:method:: add_context(context)

      Add arbirtary context to the shape checker.

      This context will be included in any error messages.

      :param context: Context to add to this shape checker.


   .. py:method:: check_shape(shaped, tensor_spec, context = None)

      Raise an error if a tensor has the wrong shape.

      This remembers observed shapes and specifications, so that tensors can be checked for
      compatibility across multiple calls, and so that we can provide good error messages.

      :param shaped: The object whose shape to check.
      :param tensor_spec: Specification to check the tensor against.
          Usually this is a ``str`` in the format described under "Shape specification" in our
          User Guide.
          Alternatively this can be a pre-parsed :class:`ParsedTensorSpec`, or an actual
          :class:`Shape`.
      :param context: Information about where ``shaped`` is coming from, for improved error
          messages.
      :returns: ``shaped``, for convenience.


   .. py:method:: check_shapes(checks)

      Raise an error if any tensor has the wrong shape.

      This remembers observed shapes and specifications, so that tensors can be checked for
      compatibility across multiple calls, and so that we can provide good error messages.

      :param checks: Checks to perform. The elements can either be ``(shaped, tensor_spec)`` or
          ``(shaped, tensor_spec, context)`` tuples. Where: ``shaped`` is the tensor whose shape
          to check; ``tensor_spec`` is the specification to check it against (see "Shape
          specification" in our User Guide); and ``context`` contains (optional) information about
          where ``shaped`` came from - for better error messages.


   .. py:method:: _parse_checks(checks)

      Sanity check, register and parse the given ``checks`` into :class:`_ShapeCheck` objects.


   .. py:method:: _match_dims(shape_check)

      Match expected dimensions against actual dimensions.

      If some dimensions cannot be determined, the remaining dimensions are added to
      `_VariableState.waiting_for_varrank`.


   .. py:method:: _check_dim(expected, actual_dims, shape_possibly_truncated, shape_checks)

      Checks that ``actual_dim`` matches ``expected``.

      Newly learned information may enable the evaluation of deferred shape checks - any such will
      be added to ``shape_checks``.


   .. py:method:: _assert(condition)

      Raise a nicely formatted :class:`ShapeMismatchError` if ``condition`` is not ``True``.



