:py:mod:`check_shapes`
======================

.. py:module:: check_shapes

.. autoapi-nested-parse::

   A library for annotating and checking the shapes of tensors.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   accessors/index.rst
   argument_ref/index.rst
   base_types/index.rst
   bool_specs/index.rst
   checker/index.rst
   checker_context/index.rst
   config/index.rst
   decorator/index.rst
   error_contexts/index.rst
   exceptions/index.rst
   inheritance/index.rst
   shapes/index.rst
   specs/index.rst


Package Contents
----------------

.. py:function:: get_check_shapes(func)

   Get the ``check_shapes`` that was applied to ``func``.

   :raises ValueError: If no ``check_shapes`` was applied to ``func``.


.. py:data:: Dimension

   The size of a single observed dimension.

   Use `None` if the size of that dimension is unknown.


.. py:data:: Shape

   The complete shape of an observed object.

   Use `None` if the object has a shape, but the shape is unknown.

   Raise an exception if objects of that type can never have a shape.


.. py:class:: ShapeChecker


   Mechanism for checking the shapes of tensors.

   This remembers observed shapes and specifications, so that tensors can be checked for
   compatibility across multiple calls, and so that we can provide good error messages.

   Example:

   .. literalinclude:: /examples/test_check_shapes_examples.py
      :start-after: [shape_checker__raw]
      :end-before: [shape_checker__raw]
      :dedent:

   .. py:method:: add_context(context)

      Add arbirtary context to the shape checker.

      This context will be included in any error messages.

      :param context: Context to add to this shape checker.


   .. py:method:: check_shape(shaped, tensor_spec, context = None)

      Raise an error if a tensor has the wrong shape.

      This remembers observed shapes and specifications, so that tensors can be checked for
      compatibility across multiple calls, and so that we can provide good error messages.

      :param shaped: The object whose shape to check.
      :param tensor_spec: Specification to check the tensor against.
          Usually this is a ``str`` in the format described under "Shape specification" in our
          User Guide.
          Alternatively this can be a pre-parsed :class:`ParsedTensorSpec`, or an actual
          :class:`Shape`.
      :param context: Information about where ``shaped`` is coming from, for improved error
          messages.
      :returns: ``shaped``, for convenience.


   .. py:method:: check_shapes(checks)

      Raise an error if any tensor has the wrong shape.

      This remembers observed shapes and specifications, so that tensors can be checked for
      compatibility across multiple calls, and so that we can provide good error messages.

      :param checks: Checks to perform. The elements can either be ``(shaped, tensor_spec)`` or
          ``(shaped, tensor_spec, context)`` tuples. Where: ``shaped`` is the tensor whose shape
          to check; ``tensor_spec`` is the specification to check it against (see "Shape
          specification" in our User Guide); and ``context`` contains (optional) information about
          where ``shaped`` came from - for better error messages.


   .. py:method:: _parse_checks(checks)

      Sanity check, register and parse the given ``checks`` into :class:`_ShapeCheck` objects.


   .. py:method:: _match_dims(shape_check)

      Match expected dimensions against actual dimensions.

      If some dimensions cannot be determined, the remaining dimensions are added to
      `_VariableState.waiting_for_varrank`.


   .. py:method:: _check_dim(expected, actual_dims, shape_possibly_truncated, shape_checks)

      Checks that ``actual_dim`` matches ``expected``.

      Newly learned information may enable the evaluation of deferred shape checks - any such will
      be added to ``shape_checks``.


   .. py:method:: _assert(condition)

      Raise a nicely formatted :class:`ShapeMismatchError` if ``condition`` is not ``True``.



.. py:function:: check_shape(shaped, tensor_spec, context = None)

   Raise an error if a tensor has the wrong shape.

   This uses the :class:`ShapeChecker` from the wrapping :func:`check_shapes` decorator. Behaviour
   is undefined if you call this from a function that is not directly wrapped in
   :func:`check_shapes` or :func:`inherit_check_shapes`.

   Example:

   .. literalinclude:: /examples/test_check_shapes_examples.py
      :start-after: [intermediate_results]
      :end-before: [intermediate_results]
      :dedent:

   :param shaped: The object whose shape to check.
   :param tensor_spec: Specification to check the tensor against. See "Shape specification" in our
       User Guide.
   :param context: Information about where ``shaped`` is coming from, for improved error
       messages.
   :returns: ``shaped``, for convenience.


.. py:function:: get_shape_checker()

   Get the :class:`ShapeChecker` from the wrapping :func:`check_shapes` decorator.

   Behaviour is undefined if you call this from a function that is not directly wrapped in
   :func:`check_shapes` or :func:`inherit_check_shapes`.


.. py:class:: DocstringFormat


   Bases: :py:obj:`enum.Enum`

   Enumeration of supported formats of docstrings.

   .. py:attribute:: SPHINX
      :value: 'sphinx'

      Rewrite docstrings in the `Sphinx <https://www.sphinx-doc.org/en/master/>`_ format.


   .. py:attribute:: NONE
      :value: 'none'

      Do not rewrite docstrings.



.. py:class:: ShapeCheckingState


   Bases: :py:obj:`enum.Enum`

   Different states of whether to actually check shapes.

   .. py:attribute:: ENABLED
      :value: 'enabled'

      Always check shapes.


   .. py:attribute:: EAGER_MODE_ONLY
      :value: 'eager_mode_only'

      Only check shapes if `tf.inside_function()` is `False`.


   .. py:attribute:: DISABLED
      :value: 'disabled'

      Never check shapes.


   .. py:method:: __bool__()

      Return whether we currently should check shapes.



.. py:function:: disable_check_shapes()

   Context manager that temporarily disables shape checking.

   Example:

   .. literalinclude:: /examples/test_check_shapes_examples.py
      :start-after: [disable__context_manager]
      :end-before: [disable__context_manager]
      :dedent:


.. py:function:: get_drop_frames()

   Get whether :mod:`check_shapes` should hide itself from exception stack traces.


.. py:function:: get_enable_check_shapes()

   Get whether to enable :mod:`check_shapes`.


.. py:function:: get_enable_function_call_precompute()

   Get whether to precompute function call path and line numbers for debugging.


.. py:function:: get_rewrite_docstrings()

   Get how :mod:`check_shapes` should rewrite docstrings.


.. py:function:: set_drop_frames(drop_frames)

   Set whether :mod:`check_shapes` should hide itself from exception stack traces.


.. py:function:: set_enable_check_shapes(enabled)

   Set whether to enable :mod:`check_shapes`.

   Check shapes has a non-zero impact on performance. If this is unacceptable to you, you can
   use this function to disable it.

   Example:

   .. literalinclude:: /examples/test_check_shapes_examples.py
      :start-after: [disable__manual]
      :end-before: [disable__manual]
      :dedent:

   See also :func:`disable_check_shapes`.


.. py:function:: set_enable_function_call_precompute(enabled)

   Set whether to precompute function call path and line numbers for debugging.

   This is disabled by default, because it is (relatively) slow. Enabling this can give better
   error messages.

   Example:

   .. literalinclude:: /examples/test_check_shapes_examples.py
      :start-after: [disable_function_call_precompute]
      :end-before: [disable_function_call_precompute]
      :dedent:


.. py:function:: set_rewrite_docstrings(docstring_format)

   Set how :mod:`check_shapes` should rewrite docstrings.

   See :class:`DocstringFormat` for valid choices.


.. py:function:: check_shapes(*specs, tf_decorator = False)

   Decorator that checks the shapes of tensor arguments.

   Example:

   .. literalinclude:: /examples/test_check_shapes_examples.py
      :start-after: [basic]
      :end-before: [basic]
      :dedent:

   :param specs: Specification of arguments to check. See: "Check specification" in our User Guide.
   :param tf_decorator: Whether to wrap the shape check with
       ``tf.compat.v1.flags.tf_decorator.make_decorator``.
       Setting this `True` seems to solve some problems, particularly related to Keras models,
       but create some other problems, particularly related to branching on tensors.


.. py:class:: ErrorContext


   Bases: :py:obj:`abc.ABC`

   A context in which an error can occur.

   Contexts should be immutable, and implement :func:`__eq__` - so that they can be composed using
   :class:`StackContext` and :class:`ParallelContext`.

   The contexts are often created even if an error doesn't actually occur, so they should be cheap
   to create - prefer to do any slow computation in :func:`print`, rather than in :func:`__init__`.

   Maybe think of an :class:`ErrorContext` as a factory of error messages.

   .. py:method:: print(builder)
      :abstractmethod:

      Print this context to the given `MessageBuilder`.



.. py:function:: inherit_check_shapes(func)

   Decorator that inherits the :func:`check_shapes` decoration from any overridden method in a
   super-class.

   Example:

   .. literalinclude:: /examples/test_check_shapes_examples.py
      :start-after: [reuse__inherit_check_shapes]
      :end-before: [reuse__inherit_check_shapes]
      :dedent:

   See: "Class inheritance" in our User Guide.


.. py:function:: get_shape(shaped, context)

   Returns the shape of the given object.

   See also :func:`register_get_shape`.

   :param shaped: The objects whose shape to extract.
   :param context: Context we are getting the shape in, for improved error messages.
   :returns: The shape of ``shaped``, or ``None`` if the shape exists, but is unknown.
   :raises NoShapeError: If objects of this type does not have shapes.


.. py:function:: register_get_shape(shape_type)

   Register a function for extracting the shape from a given type of objects.

   Example:

   .. literalinclude:: /examples/test_check_shapes_examples.py
      :start-after: [custom_type]
      :end-before: [custom_type]
      :dedent:

   See also :func:`get_shape`.

   :param shape_type: Type of objects to extract shapes from.


